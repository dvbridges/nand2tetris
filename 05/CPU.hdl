// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Parse some commands
    Not(in=instruction[15], out=isAddress);
    Not(in=isAddress, out=isInstruction);
    Or(a=instruction[5], b=isAddress, out=writeA);
    And(a=instruction[4], b=isInstruction, out=writeD);
    And(a=instruction[3], b=isInstruction, out=writeM, out=writeToMem);   
    
    // if 1, return ALU, if 0, return instruction 
    // Note, a = 0, b = 1
    Mux16(a=instruction, b=aluToA, sel=isInstruction, out=toRegA);

    // Write to A 
    ARegister(in=toRegA, load=writeA, out=regAtoMux, out=regAtoPC, out[0..14]=addressM);

    // Determine address entry into ALU
    // Note, a = 0, b = 1
    Mux16(a=regAtoMux, b=inM, sel=instruction[12], out=addressToALU);

    // Compute instruction
    ALU(x=dOut, y=addressToALU, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=aluToD, out=aluToA, out=toMem, 
        zr=zr1, ng=ng1);

    // Write to M
    Mux16(a=false, b=toMem, sel=writeToMem, out=outM);

    // Write to D
    DRegister(in=aluToD, load=writeD, out=dOut);

    // Program counter
    And(a=zr1, b=instruction[1], out=j2);
    And(a=ng1, b=instruction[2], out=j1);
    Not(in=zr1, out=notZR);
    Not(in=ng1, out=notNG);
    And(a=notZR, b=notNG, out=noConds);
    And(a=noConds, b=instruction[0], out=j3);
    Or(a=j1, b=j2, out=j1j2); 
    Or(a=j1j2, b=j3, out=j1j2j3);
    And(a=isInstruction, b=j1j2j3, out=jump);
    Not(in=jump, out=increment);
    // Set program counter
    PC(in=regAtoPC, load=jump, inc=increment, reset=reset, out[0..14]=pc);

    
}