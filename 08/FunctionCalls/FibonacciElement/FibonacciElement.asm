@256
D=A
@SP
AM=D
@RETURN$Sys.init$0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0; JMP
(RETURN$Sys.init$0)
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Main.fibonacci 1   
@RETURN$Main.fibonacci$1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0; JMP
(RETURN$Main.fibonacci$1)
// label WHILE
(WHILE)
// goto WHILE              
@WHILE
0; JMP
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt                     
@SP
AM=M-1
D=M
A=A-1
D=M-D
@LT_TRUE_0
D;JLT
@SP
A=M-1
M=0
@LT_FALSE_0
0;JMP
(LT_TRUE_0)
@SP
A=M-1
M=-1
(LT_FALSE_0)
// if-goto IF_TRUE
@SP
AM=M-1
D=M
@IF_TRUE
D;JNE
// goto IF_FALSE
@IF_FALSE
0; JMP
// label IF_TRUE          
(IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@SAVEFRAME
M=D
@5
D=A
@SAVEFRAME
D=M-D
A=D
D=M
@RET_ADDR
M=D
@0
D=A
@ARG
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@SAVEFRAME
A=M-D
D=M
@THAT
M=D
@2
D=A
@SAVEFRAME
A=M-D
D=M
@THIS
M=D
@3
D=A
@SAVEFRAME
A=M-D
D=M
@ARG
M=D
@4
D=A
A=M
@SAVEFRAME
A=M-D
D=M
@LCL
M=D
@RET_ADDR
A=M
0;JMP
// label IF_FALSE         
(IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1  
@RETURN$Main.fibonacci$2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0; JMP
(RETURN$Main.fibonacci$2)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1  
@RETURN$Main.fibonacci$3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0; JMP
(RETURN$Main.fibonacci$3)
// add                    
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return
@LCL
D=M
@SAVEFRAME
M=D
@5
D=A
@SAVEFRAME
D=M-D
A=D
D=M
@RET_ADDR
M=D
@0
D=A
@ARG
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@SAVEFRAME
A=M-D
D=M
@THAT
M=D
@2
D=A
@SAVEFRAME
A=M-D
D=M
@THIS
M=D
@3
D=A
@SAVEFRAME
A=M-D
D=M
@ARG
M=D
@4
D=A
A=M
@SAVEFRAME
A=M-D
D=M
@LCL
M=D
@RET_ADDR
A=M
0;JMP
